// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DepositAdded extends ethereum.Event {
  get params(): DepositAdded__Params {
    return new DepositAdded__Params(this);
  }
}

export class DepositAdded__Params {
  _event: DepositAdded;

  constructor(event: DepositAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get market(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get commitment(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get depositId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DepositWithdrawal extends ethereum.Event {
  get params(): DepositWithdrawal__Params {
    return new DepositWithdrawal__Params(this);
  }
}

export class DepositWithdrawal__Params {
  _event: DepositWithdrawal;

  constructor(event: DepositWithdrawal) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewDeposit extends ethereum.Event {
  get params(): NewDeposit__Params {
    return new NewDeposit__Params(this);
  }
}

export class NewDeposit__Params {
  _event: NewDeposit;

  constructor(event: NewDeposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get market(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get commitment(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get depositId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class PauseState extends ethereum.Event {
  get params(): PauseState__Params {
    return new PauseState__Params(this);
  }
}

export class PauseState__Params {
  _event: PauseState;

  constructor(event: PauseState) {
    this._event = event;
  }

  get _pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isPaused(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Deposit__getDepositsResult {
  value0: Array<Bytes>;
  value1: Array<Bytes>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;

  constructor(
    value0: Array<Bytes>,
    value1: Array<Bytes>,
    value2: Array<BigInt>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytesArray(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytesArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }
}

export class Deposit extends ethereum.SmartContract {
  static bind(address: Address): Deposit {
    return new Deposit("Deposit", address);
  }

  avblReservesDeposit(_market: Bytes): BigInt {
    let result = super.call(
      "avblReservesDeposit",
      "avblReservesDeposit(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_market)]
    );

    return result[0].toBigInt();
  }

  try_avblReservesDeposit(_market: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "avblReservesDeposit",
      "avblReservesDeposit(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_market)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositRequest(_market: Bytes, _commitment: Bytes, _amount: BigInt): boolean {
    let result = super.call(
      "depositRequest",
      "depositRequest(bytes32,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_market),
        ethereum.Value.fromFixedBytes(_commitment),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_depositRequest(
    _market: Bytes,
    _commitment: Bytes,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "depositRequest",
      "depositRequest(bytes32,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_market),
        ethereum.Value.fromFixedBytes(_commitment),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getDepositInterest(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "getDepositInterest",
      "getDepositInterest(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDepositInterest(
    account: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositInterest",
      "getDepositInterest(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeposits(account: Address): Deposit__getDepositsResult {
    let result = super.call(
      "getDeposits",
      "getDeposits(address):(bytes32[],bytes32[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(account)]
    );

    return new Deposit__getDepositsResult(
      result[0].toBytesArray(),
      result[1].toBytesArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray()
    );
  }

  try_getDeposits(
    account: Address
  ): ethereum.CallResult<Deposit__getDepositsResult> {
    let result = super.tryCall(
      "getDeposits",
      "getDeposits(address):(bytes32[],bytes32[],uint256[],uint256[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Deposit__getDepositsResult(
        value[0].toBytesArray(),
        value[1].toBytesArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray()
      )
    );
  }

  getFairPriceDeposit(_requestId: BigInt): BigInt {
    let result = super.call(
      "getFairPriceDeposit",
      "getFairPriceDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)]
    );

    return result[0].toBigInt();
  }

  try_getFairPriceDeposit(_requestId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFairPriceDeposit",
      "getFairPriceDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasAccount(_account: Address): boolean {
    let result = super.call("hasAccount", "hasAccount(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBoolean();
  }

  try_hasAccount(_account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasAccount", "hasAccount(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasDeposit(_market: Bytes, _commitment: Bytes): boolean {
    let result = super.call(
      "hasDeposit",
      "hasDeposit(bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(_market),
        ethereum.Value.fromFixedBytes(_commitment)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasDeposit(
    _market: Bytes,
    _commitment: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasDeposit",
      "hasDeposit(bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(_market),
        ethereum.Value.fromFixedBytes(_commitment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasYield(_market: Bytes, _commitment: Bytes): boolean {
    let result = super.call("hasYield", "hasYield(bytes32,bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_market),
      ethereum.Value.fromFixedBytes(_commitment)
    ]);

    return result[0].toBoolean();
  }

  try_hasYield(
    _market: Bytes,
    _commitment: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasYield", "hasYield(bytes32,bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_market),
      ethereum.Value.fromFixedBytes(_commitment)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPausedDeposit(): boolean {
    let result = super.call("isPausedDeposit", "isPausedDeposit():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPausedDeposit(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPausedDeposit",
      "isPausedDeposit():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  utilisedReservesDeposit(_market: Bytes): BigInt {
    let result = super.call(
      "utilisedReservesDeposit",
      "utilisedReservesDeposit(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_market)]
    );

    return result[0].toBigInt();
  }

  try_utilisedReservesDeposit(_market: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "utilisedReservesDeposit",
      "utilisedReservesDeposit(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_market)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawDeposit(
    _market: Bytes,
    _commitment: Bytes,
    _amount: BigInt
  ): boolean {
    let result = super.call(
      "withdrawDeposit",
      "withdrawDeposit(bytes32,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_market),
        ethereum.Value.fromFixedBytes(_commitment),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawDeposit(
    _market: Bytes,
    _commitment: Bytes,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawDeposit",
      "withdrawDeposit(bytes32,bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_market),
        ethereum.Value.fromFixedBytes(_commitment),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class DepositRequestCall extends ethereum.Call {
  get inputs(): DepositRequestCall__Inputs {
    return new DepositRequestCall__Inputs(this);
  }

  get outputs(): DepositRequestCall__Outputs {
    return new DepositRequestCall__Outputs(this);
  }
}

export class DepositRequestCall__Inputs {
  _call: DepositRequestCall;

  constructor(call: DepositRequestCall) {
    this._call = call;
  }

  get _market(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _commitment(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositRequestCall__Outputs {
  _call: DepositRequestCall;

  constructor(call: DepositRequestCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PauseDepositCall extends ethereum.Call {
  get inputs(): PauseDepositCall__Inputs {
    return new PauseDepositCall__Inputs(this);
  }

  get outputs(): PauseDepositCall__Outputs {
    return new PauseDepositCall__Outputs(this);
  }
}

export class PauseDepositCall__Inputs {
  _call: PauseDepositCall;

  constructor(call: PauseDepositCall) {
    this._call = call;
  }
}

export class PauseDepositCall__Outputs {
  _call: PauseDepositCall;

  constructor(call: PauseDepositCall) {
    this._call = call;
  }
}

export class UnpauseDepositCall extends ethereum.Call {
  get inputs(): UnpauseDepositCall__Inputs {
    return new UnpauseDepositCall__Inputs(this);
  }

  get outputs(): UnpauseDepositCall__Outputs {
    return new UnpauseDepositCall__Outputs(this);
  }
}

export class UnpauseDepositCall__Inputs {
  _call: UnpauseDepositCall;

  constructor(call: UnpauseDepositCall) {
    this._call = call;
  }
}

export class UnpauseDepositCall__Outputs {
  _call: UnpauseDepositCall;

  constructor(call: UnpauseDepositCall) {
    this._call = call;
  }
}

export class WithdrawDepositCall extends ethereum.Call {
  get inputs(): WithdrawDepositCall__Inputs {
    return new WithdrawDepositCall__Inputs(this);
  }

  get outputs(): WithdrawDepositCall__Outputs {
    return new WithdrawDepositCall__Outputs(this);
  }
}

export class WithdrawDepositCall__Inputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }

  get _market(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _commitment(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawDepositCall__Outputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
